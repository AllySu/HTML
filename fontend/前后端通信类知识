什么是同源策略及限制
什么是同源策略 
同源策略：从一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的关键安全机制。 
源：一个源指的是主机名、协议和端口号的组合，必须相同 
同源的限制 
不是一个源的文档没有权利去操作另一个源的文档，限制在如下方面：

Cookie、LocalStorage 和 IndexDB无法读取
DOM无法获得
AJAX请求不能发送
前后端如何通信
最常用的无外乎下面三种：

Ajax，同源下面的通信方式
WebSocket，不受同源策略限制
CORS，新的通信标准
如何创建Ajax
需要留意如下几点：

XMLHttpRequest对象的工作流程
兼容性处理
事件触发的条件
事件触发的顺序
跨域通信的几种方式
网上有很多文章总结了很多，这里只说如下几种：

JSONP
Hash
postMessage(HTML5)
WebSocket
CORS
JSONP原理 
基本原理：利用script标签的异步加载特性实现 
给服务端传一个回调函数，服务器返回一个传递过去的回调函数名称的JS代码 
Hash 
利用hash，场景是当前页面 A 通过iframe或frame嵌入了跨域的页面 B

// 在A中伪代码如下：
var B = document.getElementsByTagName('iframe');
B.src = B.src + '#' + 'data';
// 在B中的伪代码如下
window.onhashchange = function () {
    var data = window.location.hash;
};
postMessage 
窗口A(http:A.com)向跨域的窗口B(http:B.com)发送信息

Bwindow.postMessage('data', 'http://B.com');
// 在窗口B中监听
Awindow.addEventListener('message', function (event) {
      console.log(event.origin);
      console.log(event.source);
      console.log(event.data);
}, false);
WebSocket

var ws = new WebSocket('wss://echo.websocket.org');
监听onopen,onmessage,onclose事件 
CORS 
CORS【参考资料】http://www.ruanyifeng.com/blog/2016/04/cors.html 
HTML5 的fetch API

// url（必选），options（可选）
fetch('/some/url/', {
      method: 'get',
}).then(function (response) {
     // success
}).catch(function (err) {
       // 出错了，等价于 then 的第二个参数，但这样更好用更直观
});
